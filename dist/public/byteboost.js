self.addEventListener("install",()=>{self.skipWaiting()}),self.addEventListener("activate",e=>{e.waitUntil(clients.claim())});let allRequests=[],wantedFiles=[],wantedFilesRequests=[],wantedFilesResponses=[];const isSuccessResponse=e=>199<e&&e<300,makeRequest=async d=>new Promise(async t=>{try{var s,a,r={};for([s,a]of d.request.headers.entries())r[s]=a;const u={method:d.request.method,referrer:d.request.referrer,url:d.request.url,when:Date.now(),requestHeaders:r,responseFailed:!1};if(u.url.includes("external.api.byteboost.io")||u.url.startsWith("chrome://")||u.url.startsWith("firefox://")||u.url.includes("cdn.jsdelivr.net/npm/@byteboost/inspector-public")||u.url.includes("cdn.byteboost.io"))return t(fetch(d.request));let e=null;try{var n=Date.now();e=await fetch(d.request),u.status=e.status,u.statusText=e.statusText,u.ok=e.ok,u.type=e.type,u.redirected=e.redirected,u.took=Date.now()-n}catch(e){u.responseFailed=!0}var i,o,c={};for([i,o]of e.headers.entries())c[i]=o;if(u.responseHeaders=c,null===e)t(fetch(d.request));else{for(const l of wantedFiles)if(u.url.endsWith(l)){wantedFilesRequests.push({request:d.request,requestInfo:u,filename:l});break}t(e)}setTimeout(()=>{obfuscateRequest(u)},0)}catch(e){t(fetch(d.request))}});let obfuscateLevel=-1,canObfuscate=!1,isObfuscating=!1;const requestObfuscationQueue=[],handleWantedRequest=async t=>{var e=wantedFilesRequests.findIndex(e=>e.requestInfo.url===t.url);if(-1!==e){const i=wantedFilesRequests[e].filename+"";var s=wantedFilesRequests[e].request,a=wantedFiles.findIndex(e=>e===i);-1!==a&&wantedFiles.splice(a,1),wantedFilesRequests.splice(e,1);try{var r=await fetch(s);if(!isSuccessResponse(r.status))throw"invalid";var n=await r.text();wantedFilesResponses.push({filename:i,content:n})}catch(e){}}},obfuscate=async()=>{var e;canObfuscate&&-1!==obfuscateLevel?0===requestObfuscationQueue.length?setTimeout(()=>{0!==requestObfuscationQueue.length?obfuscate():isObfuscating=!1},50):(e=requestObfuscationQueue.shift(),await handleWantedRequest(e),e=requestObfuscator(e,obfuscateLevel),allRequests.push(e),obfuscate()):setTimeout(()=>{obfuscate()},200)},startObfuscating=()=>{isObfuscating=!0,obfuscate()},obfuscateRequest=e=>{isObfuscating||startObfuscating(),requestObfuscationQueue.push(e)},safeHeaders=(self.addEventListener("fetch",async e=>{e.respondWith(makeRequest(e))}),self.addEventListener("message",async e=>{var t=e.source.id;if(t){var s,t=await clients.get(t);if(t){if("wanted_files"!==e.data.id)return"obfuscate_level"===e.data.id?"number"!=typeof e.data.payload||isNaN(e.data.payload)?void 0:(obfuscateLevel=e.data.payload,canObfuscate=!0,void(0!==requestObfuscationQueue.length&&startObfuscating())):void("requests:get"===e.data.id&&(s=allRequests.slice(),allRequests=[],t.postMessage({id:"requests:get",payload:s}),0!==wantedFilesResponses.length)&&(t.postMessage({id:"got_wanted_files",payload:{files:wantedFilesResponses}}),wantedFilesResponses=[]));wantedFiles=e.data.payload.wantedFiles}}}),["a-im","accept","accept-charset","accept-datetime","accept-encoding","accept-language","access-control-request-method","cache-control","connection","content-encoding","content-type","date","expect","host","if-modified-since","if-unmodified-since","max-forwards","origin","pragma","prefer","range","referer","te","trailer","transfer-encoding","user-agent","upgrade","via","warning","upgrade-insecure-requests","x-requested-with","dnt","x-forwarded-host","x-forwarded-proto","front-end-https","x-http-method-override","proxy-connection","save-data","sec-gpc","accept-ch","access-control-allow-credentials","access-control-expose-headers","access-control-max-age","access-control-allow-methods","access-control-allow-headers","access-control-allow-origin","accept-patch","accept-ranges","age","allow","alt-svc","cache-control","connection","content-disposition","content-encoding","content-language","content-length","content-location","content-range","content-type","date","delta-base","expires","im","last-modified","link","location","pragma","preference-applied","proxy-authenticate","public-key-pins","retry-after","server","strict-transport-security","trailer","transfer-encoding","tk","upgrade","vary","via","warning","www-authenticate","x-frame-options","x-content-security-policy","x-webkit-csp","content-security-policy","expect-ct","nel","permissions-policy","refresh","report-to","status","timing-allow-origin","x-content-duration","x-content-type-options","x-powered-by","x-redirect-by","x-request-id","x-correlation-id","x-ua-compatible","x-xss-protection"]),fineHeaders=["content-length","forwarded",...safeHeaders],riskHeaders=["access-control-request-headers","content-md5","from","http2-settings","if-match","if-none-match","if-range","proxy-authorization","x-forwarded-for","x-att-deviceid","x-wap-profile","x-uidh","x-correlation-id","correlation-id","x-request-id","content-md5","etag","p3p",...fineHeaders],ObfuscateLevel={HIGH:2,MEDIUM:1,LOW:0},headerRiskMap={[ObfuscateLevel.HIGH]:safeHeaders,[ObfuscateLevel.MEDIUM]:fineHeaders,[ObfuscateLevel.LOW]:riskHeaders},obfuscateHeaders=(e,t)=>{var s={};for(const a in e)headerRiskMap[t].includes(a)&&(s[a]=e[a]);return s},requestObfuscator=(t,s)=>{if(t.requestHeaders=obfuscateHeaders(t.requestHeaders,s),t.responseHeaders=obfuscateHeaders(t.responseHeaders,s),t.url.includes("?")&&s!==ObfuscateLevel.LOW){let e=t.url.split("?")[1];e=s===ObfuscateLevel.HIGH?"[QUERY_STRING_OBFUSCATED]":e.split("&").map(e=>{var[e,t]=e.split("=");return e&&t?e+"=[SOME_OBFUSCATED_VALUE]":"[NULL]"}).join("&"),t.url=t.url.substring(0,t.url.indexOf("?"))+("?"+e)}return t};
