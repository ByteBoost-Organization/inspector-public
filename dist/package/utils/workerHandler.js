"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.WorkerHandler=void 0;class WorkerHandler{initialized=!1;filePath;workerState={ready:!1,upgrading:!1};currentWorker;workerRegistration;_subscriptions=new Map;_messageQueue=[];constructor(e,r){if("undefined"==typeof window)throw new Error("Unable to initialize service worker on server");window._byteboost_workers||(window._byteboost_workers=new Map);var t=window._byteboost_workers.get(e);if(t)return t;this.filePath=r,window._byteboost_workers.set(e,this)}canCommunicate(){return this.workerState.ready&&!this.workerState.upgrading}on(e,r){this._subscriptions.set(e,r)}emit(e,r){this.currentWorker&&this.canCommunicate()?this.currentWorker.postMessage({id:e,payload:r}):this._messageQueue.push({id:e,payload:r})}onReady(){if(this.workerState.ready=!0,0!==this._messageQueue.length)if(this.currentWorker&&this.canCommunicate()){console.log("sending skipped messages!",this._messageQueue);for(const e of this._messageQueue)this.emit(e.id,e.payload)}else console.log("UNABLE TO COMMUNTICATE in onReady. This shouldn't happen")}onWorkerMessage(e){var e=e.data,r=this._subscriptions.get(e.id);r&&r(e.payload)}registerWorker(e){console.log("got new worker connection!",e),this.currentWorker=e,navigator.serviceWorker.removeEventListener("message",e=>{this.onWorkerMessage(e)}),navigator.serviceWorker.addEventListener("message",e=>{this.onWorkerMessage(e)}),this.onReady()}kill(){this.workerRegistration&&this.workerRegistration.unregister()}init(){this.initialized||(this.initialized=!0,navigator&&"serviceWorker"in navigator&&navigator.serviceWorker.register(this.filePath).then(e=>{(this.workerRegistration=e).active&&(console.log("GOT ACTIVE",e.installing),this.registerWorker(e.active)),e.addEventListener("updatefound",()=>{this.workerState.upgrading=!0;const r=e.installing;r&&(console.log("New worker is being installed for:",this.filePath),r.onstatechange=e=>{"activated"===r.state&&(this.workerState.upgrading=!1,this.workerState.ready=!1,this.registerWorker(r))})})}))}}exports.WorkerHandler=WorkerHandler;
